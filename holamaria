//HEADER ********************************

#ifndef POLIGONO_H
#define POLIGONO_H
#define pi 3,1416


class poligono{
public:
    poligono();
    virtual const double area()=0;
    virtual const double perimetro()=0;
};

class circulo:public poligono{
public:
    circulo();
    float radio,angulo;
    double area(float radio);
    double perimetro(float radio);
};

class triangulo:public poligono{
public:
    triangulo();
    float cateto1,cateto2,hipotenusa;
    double area(float cateto1,float cateto2,float hipotenusa);
    double perimetro(float cateto1, float cateto2, float hipotenusa);
    void tipo(float cateto1,float cateto2,float hipotenusa);

};
class cuadrado:public poligono{
public:
    cuadrado();
    float ladox,ladoy;
    double area(float ladox,float ladoy);
    double perimetro(float ladox, float ladoy);    
};

class estrellita_regular:public poligono{
public:
    estrellita();
    int n_lados,n_vertices, apotema, lado;
    double area(float perimetro, float apotema);
    double perimetro(float lado, float n_lados);
    void tipo(int n_lados,int n_vertices);
};

#endif // POLIGONO_H



#endif // POLIGONO_H
//cpp 
#include "poligono.h"
#include <iostream>
#include <math.h>

using namespace std;

//circulo

double circulo::area(float radio){
    return pi*pow(radio,2);
}

double circulo::perimetro(float radio)
{
    return 2*pi*radio;
}

//cuadrilatero
double cuadrado::area(float ladox,float ladoy){
    return ladox*ladoy;
}

double cuadrado::perimetro(float ladox, float ladoy)
{
    return 2*ladox+2*ladoy;
}

//triangulo
double triangulo::area(float c1,float c2,float hi){
    double aux=
            (1/4)*sqrt((c1+c2-hi)*
                       (c1-c2+hi)*
                       (-c1+c2+hi)*
                       (c1+c2+hi));
    return aux;
}
 double triangulo::perimetro(float c1, float c2, float hi)
 {
    return c1+c2+hi;
 }

//estrellita
double estrellita_regular::area(float perimetro,float apotema){
    return (perimetro*apotema)/2;
}
double estrellita_regular::perimetro(float lado, float n_lados)
{
    return lado*n_lados;
}

//tipo triangulo
void triangulo::tipo(float c1,float c2,float hi){
    if(c1==c2==hi)
        cout<<"triangulo equilatero"<<endl;
    else if((c1==c2)!=hi)
        cout<<"triangulo isoceles"<<endl;
    else if(c1!=c2!=hi)
        cout<<"triangulo escaleno"<<endl;
    else if(sqrt(pow(c1,2)+pow(c2,2))==hi)
        cout<<"triangulo rectangulo"<<endl;
}

//tipo estrellita
void estrellita_regular::tipo(int nl,int nv){

    if(nl==1)
        cout<<"punto"<<endl;
    else if(nl==2)
        cout<<"recta"<<endl;
    else if(nl==3)
        cout<<"triangulo"<<endl;
    else if(nl==4)
        cout<<"cuadrilatero"<<endl;
    else if(nl==5)
        cout<<"pentagono"<<endl;
    else if(nl==6)
        cout<<"hexagono"<<endl;
    else if(nl>=7)
        cout<<"figura de muchos lados"<<endl;
}

int main(){

    //NO ENCONTRE OTRA FORMA DE INICIALIZAR LOS DATOS SI EN EL CONSTRUCTOR DE LA CLASE
    //ESTAS LOS DATOS TIPO PUNTO(ESTRUCTURA) ->  Figura(Punto _Inicio, Punto _Final)
    /*Punto punto1, punto2;
    punto1.x = 1;
    punto1.y = 2;

    punto2.x = 2;
    punto2.y = 2;

    poligono poligono(punto1, punto2);*/

    cuadrado cuadradito(1,1, 6,1);
    cuadradito.mostrarDatos();

    rectangulo rectangulito(1,1, 6,1, 2);
    rectangulito.mostrarDatos();

    circulo circulito(1,1, 8,1);
    circulito.mostrarDatos();

    triangulo triangulito(1,1, 3,1, 2,3);
    triangulito.mostrarDatos();

    return 0;

}














